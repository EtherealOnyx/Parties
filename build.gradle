buildscript {
    repositories {
        // These repositories are only for Gradle plugins, put any other repositories in the repository block further below
        maven { url = 'https://maven.minecraftforge.net' }
        maven { url = 'https://maven.parchmentmc.org' }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
        classpath 'org.parchmentmc:librarian:1.+'
        classpath 'org.spongepowered:mixingradle:0.7.+'
    }
}
// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
plugins {
    id 'eclipse'
    id 'maven-publish'
}
apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'org.parchmentmc.librarian.forgegradle'
apply plugin: 'org.spongepowered.mixin'

version = '1.18.2-1.0.1'
group = 'io.sedu.mc.sedparties' // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = 'sedparties'

// Mojang ships Java 17 to end users in 1.18+, so your mod should target Java 17.
java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"
minecraft {
    // The mappings can be changed at any time and must be in the following format.
    // Channel:   Version:
    // official   MCVersion             Official field/method names from Mojang mapping files
    // parchment  YYYY.MM.DD-MCVersion  Open community-sourced parameter names and javadocs layered on top of official
    //
    // You must be aware of the Mojang license when using the 'official' or 'parchment' mappings.
    // See more information here: https://github.com/MinecraftForge/MCPConfig/blob/master/Mojang.md
    //
    // Parchment is an unofficial project maintained by ParchmentMC, separate from MinecraftForge
    // Additional setup is needed to use their mappings: https://github.com/ParchmentMC/Parchment/wiki/Getting-Started
    //
    // Use non-default mappings at your own risk. They may not always work.
    // Simply re-run your setup task after changing the mappings to update your workspace.
    mappings channel: 'parchment', version: '2022.11.06-1.18.2'

    //accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg') // Currently, this location cannot be changed from the default.

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        client {
            workingDirectory project.file('runC1')
            jvmArg "-XX:+AllowEnhancedClassRedefinition"

            // Recommended logging data for a userdev environment
            // The markers can be added/remove as needed separated by commas.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', 'REGISTRIES'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"

            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            property 'forge.logging.console.level', 'debug'

            // Comma-separated list of namespaces to load gametests from. Empty = all namespaces.
            property 'forge.enabledGameTestNamespaces', 'sedparties'

            mods {
                sedparties {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')
            jvmArg "-XX:+AllowEnhancedClassRedefinition"

            property 'forge.logging.markers', 'REGISTRIES'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"

            property 'forge.logging.console.level', 'debug'

            // Comma-separated list of namespaces to load gametests from. Empty = all namespaces.
            property 'forge.enabledGameTestNamespaces', 'sedparties'

            mods {
                sedparties {
                    source sourceSets.main
                }
            }
        }

        // This run config launches GameTestServer and runs all registered gametests, then exits.
        // By default, the server will crash when no gametests are provided.
        // The gametest system is also enabled by default for other run configs under the /test command.
        gameTestServer {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            // The markers can be added/remove as needed separated by commas.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', 'REGISTRIES'

            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            property 'forge.logging.console.level', 'debug'

            // Comma-separated list of namespaces to load gametests from. Empty = all namespaces.
            property 'forge.enabledGameTestNamespaces', 'sedparties'

            mods {
                sedparties {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            args '--mod', 'sedparties', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                sedparties {
                    source sourceSets.main
                }
            }
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    // Put repositories for dependencies here
    // ForgeGradle automatically adds the Forge maven and Maven Central for you

    // If you have mod jar dependencies in ./libs, you can declare them as a repository like so:
    // flatDir {
    //     dir 'libs'
    // }
    maven { // JEI
        url "https://dvs1.progwml6.com/files/maven"
    }

    maven {
        url "https://www.cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }

    flatDir {
        dirs "libs"
    }
    mavenLocal()
}

dependencies {
    // Specify the version of Minecraft to use. If this is any group other than 'net.minecraft', it is assumed
    // that the dep is a ForgeGradle 'patcher' dependency, and its patches will be applied.
    // The userdev artifact is a special name and will get all sorts of transformations applied to it.
    minecraft 'net.minecraftforge:forge:1.18.2-40.2.0'
    //mixin
    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'

    // Real mod deobf dependency examples - these get remapped to your current mappings
    // compileOnly fg.deobf("mezz.jei:jei-${mc_version}:${jei_version}:api") // Adds JEI API as a compile dependency
    // runtimeOnly fg.deobf("mezz.jei:jei-${mc_version}:${jei_version}") // Adds the full JEI mod as a runtime dependency
    // implementation fg.deobf("com.tterrag.registrate:Registrate:MC${mc_version}-${registrate_version}") // Adds registrate as a dependency

    // Examples using mod jars from ./libs
    // implementation fg.deobf("blank:coolmod-${mc_version}:${coolmod_version}")

    // For more info...
    // http://www.gradle.org/docs/current/userguide/artifact_dependencies_tutorial.html
    // http://www.gradle.org/docs/current/userguide/dependency_management.html

    compileOnly fg.deobf("mezz.jei:jei-${jei_version}:api")
    implementation fg.deobf("mezz.jei:jei-${jei_version}")

    //PlayerRevive Mod
    compileOnly fg.deobf("curse.maven:playerrevive-266890:3759779") //impl
    compileOnly fg.deobf("curse.maven:creativecore-257814:3834521") //runtime

    //Hardcore Revival Mod
    compileOnly fg.deobf("curse.maven:hardcorerevival-274036:3830873")
    compileOnly fg.deobf("curse.maven:balm-531761:4442615")

    //Cold Sweat
    //compileOnly fg.deobf("curse.maven:coldsweat-506194:4459981")
    compileOnly fg.deobf("curse.maven:coldsweat-506194:4512295")

    //Tough as Nails
    compileOnly fg.deobf("curse.maven:toughasnails-246391:3804267") //impl

    //Ars Nouveau Support
    compileOnly fg.deobf("curse.maven:arsnoveau-401955:4052851") //impl
    //runtimeOnly fg.deobf("curse.maven:patchouli-306770:3846086")
    //runtimeOnly fg.deobf("curse.maven:curios-309927:4418032")

    //Customizable Player Models
    //runTimeOnly fg.deobf("curse.maven:custommodels-439870:4439327")

    //Epic Fight
    compileOnly fg.deobf("curse.maven:epicfight-405076:4447075")

    //Spells and Shields
    compileOnly fg.deobf("curse.maven:spellsnshields-582301:4454956")

    //Feathers
    compileOnly fg.deobf("curse.maven:feathers-699933:4416859")
    //runtimeOnly fg.deobf("curse.maven:elenaidodge2-442962:4127737")

    //Open-PAC
    compileOnly fg.deobf("curse.maven:openpac-636608:4500809")

    //Homeostatic
    compileOnly fg.deobf("curse.maven:homeostatic-634466:4655143")


    //Origins Mod
    compileOnly fg.deobf("curse.maven:origins-forge-474438:3889853")


    //Iron's Spells n' Spellbooks
    compileOnly fg.deobf("curse.maven:irons-spells-n-spellbooks-855414:4629167")
    compileOnly fg.deobf("curse.maven:playeranimator-658587:4418152")
    //runtimeOnly fg.deobf("curse.maven:caelus-308989:3650485")
    //runtimeOnly fg.deobf("curse.maven:geckolib-388172:4181370")

    //Curios API
    runtimeOnly fg.deobf("curse.maven:curios-309927:4590652")

    //GeckoLib


    //AppleSkin
    compileOnly fg.deobf("curse.maven:appleskin-248787:3686482")

    //Game Stages
    implementation fg.deobf("curse.maven:game-stages-268655:4066389")
    runtimeOnly fg.deobf("curse.maven:bookshelf-228525:4556713")
    runtimeOnly fg.deobf("curse.maven:crafttweaker-239197:4611964")

    //Incapacitated
    implementation fg.deobf("curse.maven:incapacitated-528135:4645650")

    //Thirst Mod - Local file
    compileOnly fg.deobf("local:Thirst:1.2.3")

    //Dietary Statistics - Local file
    implementation fg.deobf("local:DietaryStatistics:1.0.2")
}

mixin {
    add sourceSets.main, "sedparties.refmap.json"
    config "sedparties.mixins.json"
}

// Example for how to get properties into the manifest for reading at runtime.
// Example configuration to allow publishing using the maven-publish plugin
// This is the preferred method to reobfuscate your jar file
jar.finalizedBy('reobfJar')
// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
// publish.dependsOn('reobfJar')



tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}
